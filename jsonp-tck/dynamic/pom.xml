<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <parent>
        <groupId>fish.payara.jakarta.tests.tck</groupId>
        <artifactId>jsonp-tck-runner</artifactId>
        <version>1.0-SNAPSHOT</version>
    </parent>

    <artifactId>jsonp-tck-runner-dynamic</artifactId>
    <version>1.0-SNAPSHOT</version>
    <name>Jakarta JSON Processing TCK Runner - Dynamic</name>
    <description>This pom runs the JakartaEE JSON Processing TCK against a running Payara Server</description>


    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <maven.compiler.source>11</maven.compiler.source>
        <maven.compiler.target>11</maven.compiler.target>
        <failsafe.plugin.jdk17.args/>
        <jimage.dir>${project.build.directory}/jdk-bundle</jimage.dir>
        <signature.sigTestClasspath/>
        <payara.arquillian.container.version>3.0.alpha3</payara.arquillian.container.version>
        <payara.home></payara.home>
        <payara.json-api.jar>${payara.home}/glassfish/modules/jakarta.json.jar</payara.json-api.jar>
        <jsonp.api.version>2.1.0</jsonp.api.version>
    </properties>

    <!-- needed for servlet 6.0, concurrent 3.0 -->
    <repositories>
        <repository>
            <id>payara-nexus-artifacts</id>
            <url>https://nexus.payara.fish/repository/payara-artifacts</url>
            <releases>
                <enabled>true</enabled>
            </releases>
            <snapshots>
                <enabled>false</enabled>
            </snapshots>
        </repository>
        <repository>
            <id>staged-jakarta-releases</id>
            <url>https://jakarta.oss.sonatype.org/content/groups/staging/</url>
        </repository>
    </repositories>

    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>org.jboss.arquillian</groupId>
                <artifactId>arquillian-bom</artifactId>
                <version>1.7.0.Alpha10</version>
                <scope>import</scope>
                <type>pom</type>
            </dependency>
            <dependency>
                <groupId>org.junit</groupId>
                <artifactId>junit-bom</artifactId>
                <version>5.8.2</version>
                <scope>import</scope>
                <type>pom</type>
            </dependency>
            <dependency>
                <groupId>jakarta.json</groupId>
                <artifactId>jakarta.json-tck</artifactId>
                <version>${jsonp.api.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
        </dependencies>
    </dependencyManagement>

    <dependencies>
        <!-- The TCK -->
        <dependency>
            <groupId>jakarta.json</groupId>
            <artifactId>jakarta.json-tck-tests</artifactId>
            <version>${jsonp.api.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>jakarta.json</groupId>
            <artifactId>jakarta.json-tck-tests-pluggability</artifactId>
            <version>${jsonp.api.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.netbeans.tools</groupId>
            <artifactId>sigtest-maven-plugin</artifactId>
            <version>1.6</version>
        </dependency>

        <!-- Arquillian Remote Payara server -->
        <dependency>
            <groupId>fish.payara.arquillian</groupId>
            <artifactId>arquillian-payara-server-remote</artifactId>
            <version>${payara.arquillian.container.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>fish.payara.arquillian</groupId>
            <artifactId>payara-client-ee9</artifactId>
            <version>${payara.arquillian.container.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.jboss.arquillian.junit5</groupId>
            <artifactId>arquillian-junit5-container</artifactId>
            <scope>test</scope>
        </dependency>

        <!-- Test frameworks -->
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter-api</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter-engine</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.junit.platform</groupId>
            <artifactId>junit-platform-reporting</artifactId>
            <scope>test</scope>
        </dependency>

        <!-- hidden runtime dependencies of arquillian container -->
        <dependency>
            <groupId>jakarta.enterprise</groupId>
            <artifactId>jakarta.enterprise.cdi-api</artifactId>
            <version>3.0.0</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.eclipse.parsson</groupId>
            <artifactId>parsson-media</artifactId>
            <version>1.1.0</version>
            <scope>test</scope>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <version>3.0.0-M5</version>

                <executions>
                    <execution>
                        <id>default-test</id>
                        <phase>none</phase>
                    </execution>

                    <execution>
                        <id>json-tck-tests</id>
                        <goals>
                            <goal>test</goal>
                        </goals>
                        <configuration>
                            <dependenciesToScan>
                                <dependency>jakarta.json:jakarta.json-tck-tests</dependency>
                            </dependenciesToScan>
                            <excludes>
                                <exclude>JSONPSigTest*</exclude>
                            </excludes>
                            <systemPropertyVariables>
                                <junit.jupiter.extensions.autodetection.enabled>true</junit.jupiter.extensions.autodetection.enabled>
                                <jimage.dir>${jimage.dir}</jimage.dir>
                                <optional.tech.packages.to.ignore>jakarta.xml.bind</optional.tech.packages.to.ignore>
                                <signature.sigTestClasspath>${payara.json-api.jar}${path.separator}${jimage.dir}/java.base${path.separator}${jimage.dir}/java.rmi${path.separator}${jimage.dir}/java.sql${path.separator}${jimage.dir}/java.naming</signature.sigTestClasspath>
                            </systemPropertyVariables>
                        </configuration>
                    </execution>
                    <execution>
                        <id>json-tck-pluggability-tests</id>
                        <goals>
                            <goal>test</goal>
                        </goals>
                        <configuration>
                            <excludes>
                                <exclude>JsonpSignatureTest*</exclude>
                            </excludes>
                            <dependenciesToScan>
                                <dependency>jakarta.json:jakarta.json-tck-tests-pluggability</dependency>
                            </dependenciesToScan>
                            <reuseForks>false</reuseForks>
                            <trimStackTrace>false</trimStackTrace>
                            <failIfNoTests>true</failIfNoTests>
                            <testFailureIgnore>true</testFailureIgnore>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>
</project>
